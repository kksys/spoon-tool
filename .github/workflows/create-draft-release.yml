name: Create Draft Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

env:
  BRANCH_NAME: feature/update-version
  DEFAULT_BRANCH: main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ secrets.SPOON_TOOL_GH_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4

      - name: Show environment
        run: set -x; pwd; ls -la; node -v; npm -v;

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ env.BRANCH_NAME }}

      - name: Update package version
        run: |
          npm version ${{ github.event.inputs.bump_type }} --no-git-tag-version
          VERSION="v$(cat package.json | jq -r '.version')"
          echo VERSION="${VERSION}" >> "${GITHUB_ENV}"
          for package_dir in $(ls packages); do
            pushd $(pwd)
            cd packages/${package_dir}
            npm version "${VERSION}" --no-git-tag-version
            popd
          done
          git add -u
          git commit -m "Update version to ${VERSION}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}

      - name: Push tag to GitHub
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # create PR for updating version and merge it automatically
          gh pr create --base ${{ env.DEFAULT_BRANCH }} --body "${COMMIT_MSG}" --title "${COMMIT_MSG}"
          gh pr merge ${{ env.BRANCH_NAME }} --admin --merge

          # pull the latest default branch and create tag
          git fetch
          git checkout ${{ env.DEFAULT_BRANCH }}
          git pull
          git branch -d ${{ env.BRANCH_NAME }}
        env:
          GH_TOKEN: ${{ secrets.SPOON_TOOL_GH_TOKEN }}

      - name: Create Release to GitHub
        run: |
          git tag "${VERSION}"
          git push origin "${VERSION}"
          gh release create "${VERSION}" --draft --generate-notes
        env:
          GH_TOKEN: ${{ secrets.SPOON_TOOL_GH_TOKEN }}
