name: Deploy devcontainer image

on:
  push:
    branches:
      - main
    paths:
      - "tools/devcontainer/**"
  workflow_dispatch:
    inputs:

env:
  REGISTRY: ghcr.io
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  GHCR_PASSWORD: ${{ secrets.GHCR_CONTAINER_REGISTRY_PASSWORD }}

jobs:
  notify-pre-build-message:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    outputs:
      ts: ${{ steps.pre_slack.outputs.ts }}
      head_commit_message: ${{ steps.get_head_commit_message.outputs.message }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Get message of head commit
        id: get_head_commit_message
        run: echo "message=$(git log --format=%B -n 1 HEAD | head -n 1)" >> $GITHUB_OUTPUT

      - name: Pre notification to Slack
        id: pre_slack
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload-templated: true
          payload: |
            channel: "${{ secrets.SLACK_CHANNEL_ID }}"
            text: ":loading: Generating new devcontainer image..."
            blocks: [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":loading: Generating new devcontainer image..."
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "based commit: <https://github.com/${{ github.actor }}/${{ github.repository }}/commit/${{ github.sha }}|${{ steps.get_head_commit_message.outputs.message }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "Author: <https://github.com/${{ github.event.sender.login }}|@${{ github.event.sender.login }}>"
                  }
                ]
              }
            ]

  get-new-metadata-tags:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read
    outputs:
      tags: ${{ steps.format.outputs.tags }}
    steps:
      - name: Get metadata for image
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer
          tags: |
            type=ref,event=branch
            type=sha

      - name: Convert metadata to pass devcontainers/ci
        id: format
        # https://github.com/devcontainers/ci/issues/235
        run: |
          prefix="${{ env.REGISTRY }}/${{ github.repository }}/devcontainer:"

          tags=$(echo "${{ steps.meta.outputs.tags }}" | sed -e "s#${prefix}##g")
          tags=$(echo "${tags}" | tr "\n" ",")
          tags=$(echo "${tags}" | sed "s/,*$//")

          echo "tags=${tags}" >> $GITHUB_OUTPUT

  build-and-deploy-image-amd64:
    needs:
      - notify-pre-build-message
      - get-new-metadata-tags
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install skopeo
        run: |
          sudo apt-get -y update
          sudo apt-get -y install skopeo

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to the Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.GHCR_PASSWORD }}

      - name: Modify Tag
        id: modify_tag
        run: |
          IFS=',' read -r -a tags <<< "${{ needs.get-new-metadata-tags.outputs.tags }}"
          line=$(printf ",%s-${{ env.ARCH }}" "${tags[@]}")
          line=${line:1}
          json=$(printf ",\"%s-${{ env.ARCH }}\"" "${tags[@]}")
          json=${json:1}
          echo "tags=${line}" >> $GITHUB_OUTPUT
          echo "json=[${json}]" >> $GITHUB_OUTPUT
        env:
          ARCH: amd64

      - name: Build devcontainer image
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6 # v0.3
        with:
          subFolder: tools/devcontainer/images/devcontainer
          imageName: ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer
          imageTag: ${{ steps.modify_tag.outputs.tags }}
          platform: linux/amd64
          push: always
          cacheFrom: |
            ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer:${{ fromJSON(steps.modify_tag.outputs.json)[0] }}
            ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer:${{ fromJSON(steps.modify_tag.outputs.json)[1] }}

  build-and-deploy-image-arm64:
    needs:
      - notify-pre-build-message
      - get-new-metadata-tags
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install skopeo
        run: |
          sudo apt-get -y update
          sudo apt-get -y install skopeo

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to the Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.GHCR_PASSWORD }}

      - name: Modify Tag
        id: modify_tag
        run: |
          IFS=',' read -r -a tags <<< "${{ needs.get-new-metadata-tags.outputs.tags }}"
          line=$(printf ",%s-${{ env.ARCH }}" "${tags[@]}")
          line=${line:1}
          json=$(printf ",\"%s-${{ env.ARCH }}\"" "${tags[@]}")
          json=${json:1}
          echo "tags=${line}" >> $GITHUB_OUTPUT
          echo "json=[${json}]" >> $GITHUB_OUTPUT
        env:
          ARCH: arm64

      - name: Build devcontainer image
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6 # v0.3
        with:
          subFolder: tools/devcontainer/images/devcontainer
          imageName: ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer
          imageTag: ${{ steps.modify_tag.outputs.tags }}
          platform: linux/arm64
          push: always
          cacheFrom: |
            ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer:${{ fromJSON(steps.modify_tag.outputs.json)[0] }}
            ${{ env.REGISTRY }}/${{ github.repository }}/devcontainer:${{ fromJSON(steps.modify_tag.outputs.json)[1] }}

  deploy-multiarch-image:
    needs:
      - get-new-metadata-tags
      - build-and-deploy-image-amd64
      - build-and-deploy-image-arm64
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to the Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.GHCR_PASSWORD }}

      - name: Deploy multiarch image
        run: |
          function deploy_multiarch_image() {
            local tag=$1
            local registry=$2
            local repository=$3

            # pulling all architecture images
            for arch in amd64 arm64; do
              docker pull ${registry}/${repository}/devcontainer:${tag}-${arch}
            done

            # create and push manifest
            docker buildx imagetools create \
              -t ${registry}/${repository}/devcontainer:${tag} \
              ${registry}/${repository}/devcontainer:${tag}-amd64 \
              ${registry}/${repository}/devcontainer:${tag}-arm64

            # verify manifest
            docker buildx imagetools inspect \
              ${registry}/${repository}/devcontainer:${tag}
          }

          IFS=',' read -r -a tags <<< "${{ needs.get-new-metadata-tags.outputs.tags }}"

          for tag in "${tags[@]}"; do
            echo "tag=${tag}"

            deploy_multiarch_image "$tag" "${{ env.REGISTRY }}" "${{ github.repository }}"
          done

  notify-post-build-message-with-success:
    if: ${{ success() }}
    needs:
      - notify-pre-build-message
      - deploy-multiarch-image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Post notification to slack with Succeed
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.update
          payload-templated: true
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            ts: "${{ needs.notify-pre-build-message.outputs.ts }}"
            text: ":white_check_mark: Generated new devcontainer image..."
            blocks: [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":white_check_mark: Generated new devcontainer image..."
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "based commit: <https://github.com/${{ github.actor }}/${{ github.repository }}/commit/${{ github.sha }}|${{ needs.notify-pre-build-message.outputs.head_commit_message }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "Author: <https://github.com/${{ github.event.sender.login }}|@${{ github.event.sender.login }}>"
                  }
                ]
              }
            ]

  notify-post-build-message-with-failure:
    if: ${{ failure() || cancelled() }}
    needs:
      - notify-pre-build-message
      - build-and-deploy-image-amd64
      - build-and-deploy-image-arm64
      - deploy-multiarch-image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Post notification to slack with Failure
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.update
          payload-templated: true
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            ts: "${{ needs.notify-pre-build-message.outputs.ts }}"
            text: ":x: Error generating new devcontainer image..."
            blocks: [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":x: Error generating new devcontainer image...\r\nPlease refer to action log."
                }
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "based commit: <https://github.com/${{ github.actor }}/${{ github.repository }}/commit/${{ github.sha }}|${{ needs.notify-pre-build-message.outputs.head_commit_message }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "Author: <https://github.com/${{ github.event.sender.login }}|@${{ github.event.sender.login }}>"
                  }
                ]
              }
            ]
