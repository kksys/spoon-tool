name: Publish Cloudflare Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to action
permissions:
  contents: read
  deployments: write
  statuses: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  DIST_DIRECTORY: packages/frontend/dist
  FRONTEND_DIRECTORY: packages/frontend
  PACKAGE_NAME: spoon-tool-client
  ARCHIVE_NAME: spoon-tool-client.zip
  CLOUDFLARE_ENVIRONMENT: production
  CLOUDFLARE_PROJECT_NAME: spoon-tool-client

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set node version
        run: |
          node_version=$(cat package.json | jq -r .engines.node)
          echo "NODE_VERSION=${node_version}" >> $GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set pnpm version
        shell: bash
        run: |
          pnpm_version=$(cat package.json | jq -r .engines.pnpm)
          echo "PNPM_VERSION=${pnpm_version}" >> $GITHUB_ENV
      - uses: pnpm/action-setup@v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        run: pnpm i

      - name: Build
        run: pnpm -C ${{ env.FRONTEND_DIRECTORY }} build

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip output
        run: |
          pushd $(pwd)
          cd ${{ env.DIST_DIRECTORY }}
          zip -qq -r ${{ env.ARCHIVE_NAME }} .
          popd
          mv ${{ env.DIST_DIRECTORY }}/${{ env.ARCHIVE_NAME }} ${{ env.FRONTEND_DIRECTORY }}/${{ env.ARCHIVE_NAME }}

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.FRONTEND_DIRECTORY }}/${{ env.ARCHIVE_NAME }}

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.FRONTEND_DIRECTORY }}

      - name: Extract Zip package
        run: |
          mkdir -p ${{ env.DIST_DIRECTORY }}
          unzip -qq ${{ env.FRONTEND_DIRECTORY }}/${{ env.ARCHIVE_NAME }} -d ${{ env.DIST_DIRECTORY }}

      - name: Publish to Cloudflare Pages
        id: cloudflare_pages_deploy
        uses: cloudflare/pages-action@1
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          projectName: ${{ env.CLOUDFLARE_PROJECT_NAME }}
          directory: ${{ env.DIST_DIRECTORY }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Add publish URL as commit status
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request?.head.sha ?? context.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              context: 'Cloudflare Pages',
              description: 'Cloudflare Pages deployment',
              state: 'success',
              sha,
              target_url: "${{ steps.cloudflare_pages_deploy.outputs.url }}",
            });
