#!/usr/bin/env node

import { init } from 'license-checker'
import { readFileSync, writeFileSync } from 'fs'
import path from 'path'

/**
 * @typedef {import('license-checker').ModuleInfos} ModuleInfos
 * @return {Promise<ModuleInfos>}
 */
async function fetchLicenses() {
  return new Promise((resolve, reject) => {
    /**
     * @type {import('license-checker').InitOpts}
     */
    const option = {
      start: process.cwd(),
      production: true,
    }
    /**
     * @type {Parameters<import('license-checker').init>[1]}
     */
    const handler = (err, result) => err
      ? reject(err)
      : resolve(result)

    init(option, handler)
  })
}

async function main() {
  const licenses = await fetchLicenses()
  const outputDirectory = path.join(process.cwd(), 'src', 'assets', 'autogen')
  const packageJson = JSON.parse(readFileSync(path.join(process.cwd(), 'package.json'), 'utf-8'))
  const result = Object.keys(licenses)
    .map(l => {
      const { name, version } = l.match(/^(?<name>.+)@(?<version>(?:[^@]+))$/)?.groups || { name: '', version: '' }
      const {
        name: origName,
        version: origVersion,
        licenseText,
        licenseFile,
        path: _path,
        ...license
      } = licenses[l]
      return {
        name: origName ? origName : name,
        version: origVersion ? origVersion : version,
        ...license,
        licenseText: licenseText
          ? licenseText
          : licenseFile
            ? readFileSync(licenseFile, 'utf-8')
            : '',
      }
    })
    .filter(l => l.name !== packageJson.name)

  writeFileSync(path.join(outputDirectory, 'licenses.json'), JSON.stringify(result, null, 2))
}

await main()
